package com.example.wandersync.viewmodel;

import android.util.Log;

import androidx.lifecycle.LiveData;
import androidx.lifecycle.Transformations;
import androidx.lifecycle.ViewModel;
import com.example.wandersync.model.AccommodationDatabase;
import com.example.wandersync.model.AccommodationReservation;
import java.util.ArrayList;
import java.util.List;

public class AccommodationViewModel extends ViewModel {
    private AccommodationDatabase accommodationDatabase;
    private LiveData<List<AccommodationReservation>> accommodationReservationsLiveData;

    public AccommodationViewModel() {
        accommodationDatabase = AccommodationDatabase.getInstance();
        accommodationReservationsLiveData = accommodationDatabase.getAccommodationReservationsLiveData();
    }

    // Method to add a new accommodation reservation
    public void addAccommodationReservation(String location, String checkIn, String checkOut, String numRooms, String roomType) {
        Log.d("AccommodationViewModel", "addAccommodationReservation: method called");

        AccommodationReservation reservation = new AccommodationReservation(
                null, // ID will be generated by Firebase
                location,
                checkIn,
                checkOut,
                numRooms,
                roomType
        );
        Log.d("AccommodationViewModel", "addAccommodationReservation: got here");

        accommodationDatabase.addAccommodationReservation(reservation);
    }

    // Method to retrieve all accommodation reservations as LiveData
    public LiveData<List<AccommodationReservation>> getAccommodationReservations() {
        return accommodationReservationsLiveData;
    }

    // Method to update an existing accommodation reservation
    public void updateAccommodationReservation(String reservationId, AccommodationReservation updatedReservation) {
        accommodationDatabase.updateAccommodationReservation(reservationId, updatedReservation);
    }

    // Optional method to filter reservations based on room type
    public LiveData<List<AccommodationReservation>> getFilteredReservations(String roomTypeFilter) {
        return Transformations.map(accommodationReservationsLiveData, reservations -> {
            List<AccommodationReservation> filteredList = new ArrayList<>();
            for (AccommodationReservation reservation : reservations) {
                if (reservation.getRoom_Type().equals(roomTypeFilter)) {
                    filteredList.add(reservation);
                }
            }
            return filteredList;
        });
    }
}